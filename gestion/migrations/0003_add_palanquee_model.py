# Generated by Django. Modified manually to add Palanquee model

from django.db import migrations, models
import django.db.models.deletion

def create_palanquees_from_seances(apps, schema_editor):
    """
    Créer des palanquées à partir des séances existantes
    """
    Seance = apps.get_model('gestion', 'Seance')
    Palanquee = apps.get_model('gestion', 'Palanquee')
    
    # Pour chaque séance existante, créer une palanquée
    for seance in Seance.objects.all():
        # Créer une palanquée avec les données de l'ancienne séance
        palanquee = Palanquee.objects.create(
            nom=seance.palanquee,
            seance=seance,
            section=seance.section,
            encadrant=seance.encadrant,
            precision_exercices=seance.precision_exercices,
            date_creation=seance.date_creation,
            date_modification=seance.date_modification
        )
        
        # Copier les élèves et compétences
        palanquee.eleves.set(seance.eleves.all())
        palanquee.competences.set(seance.competences.all())

def reverse_palanquees(apps, schema_editor):
    """
    Supprimer toutes les palanquées créées
    """
    Palanquee = apps.get_model('gestion', 'Palanquee')
    Palanquee.objects.all().delete()

class Migration(migrations.Migration):

    dependencies = [
        ('gestion', '0002_adherent_sections'),
    ]

    operations = [
        # Étape 1: Ajouter le champ lieu à la table Seance existante
        migrations.AddField(
            model_name='seance',
            name='lieu',
            field=models.CharField(max_length=200, default='Lieu à définir'),
            preserve_default=False,
        ),
        
        # Étape 2: Créer le modèle Palanquee
        migrations.CreateModel(
            name='Palanquee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=200)),
                ('precision_exercices', models.TextField()),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_modification', models.DateTimeField(auto_now=True)),
                ('seance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='palanquees', to='gestion.seance')),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='palanquees', to='gestion.section')),
                ('encadrant', models.ForeignKey(limit_choices_to={'statut': 'encadrant'}, on_delete=django.db.models.deletion.CASCADE, related_name='palanquees_encadrees', to='gestion.adherent')),
                ('eleves', models.ManyToManyField(limit_choices_to={'statut': 'eleve'}, related_name='palanquees_suivies', to='gestion.adherent')),
                ('competences', models.ManyToManyField(related_name='palanquees', to='gestion.competence')),
            ],
            options={
                'verbose_name': 'Palanquée',
                'verbose_name_plural': 'Palanquées',
                'ordering': ['seance__date', 'nom'],
            },
        ),
        
        # Étape 3: Ajouter le champ palanquee aux évaluations
        migrations.AddField(
            model_name='evaluation',
            name='palanquee',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='gestion.palanquee'),
        ),
        
        # Étape 4: Ajouter le champ palanquee aux liens d'évaluation
        migrations.AddField(
            model_name='lienevaluation',
            name='palanquee',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='liens_evaluation', to='gestion.palanquee'),
        ),
        
        # Étape 5: Exécuter la fonction de migration des données
        migrations.RunPython(create_palanquees_from_seances, reverse_palanquees),
        
        # Étape 6: Mettre à jour les évaluations existantes pour pointer vers les palanquées
        migrations.RunSQL(
            """
            UPDATE gestion_evaluation 
            SET palanquee_id = (
                SELECT p.id 
                FROM gestion_palanquee p 
                JOIN gestion_seance s ON p.seance_id = s.id 
                WHERE s.id = gestion_evaluation.seance_id
            )
            WHERE palanquee_id IS NULL
            """,
            reverse_sql=""
        ),
        
        # Étape 7: Mettre à jour les liens d'évaluation existants
        migrations.RunSQL(
            """
            UPDATE gestion_lienevaluation 
            SET palanquee_id = (
                SELECT p.id 
                FROM gestion_palanquee p 
                JOIN gestion_seance s ON p.seance_id = s.id 
                WHERE s.id = gestion_lienevaluation.seance_id
            )
            WHERE palanquee_id IS NULL
            """,
            reverse_sql=""
        ),
        
        # Étape 8: Rendre les champs palanquee obligatoires
        migrations.AlterField(
            model_name='evaluation',
            name='palanquee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='gestion.palanquee'),
        ),
        
        migrations.AlterField(
            model_name='lienevaluation',
            name='palanquee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='liens_evaluation', to='gestion.palanquee'),
        ),
        
        # Étape 9: Mettre à jour les contraintes uniques
        migrations.AlterUniqueTogether(
            name='evaluation',
            unique_together={('palanquee', 'eleve', 'competence')},
        ),
    ]
